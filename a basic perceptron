# the "perceptron" is the simplest neural network ( we'll call them NN, to make it short and straightforward)
# Here's a first draft of code, implemented in python :

from numpy import numpy.dot

def step_function(x):
  return 1 if x >= 0 else 0
  
def perceptron_output(weights, bias, x):
  """returns 1 if the perceptron 'fires', 0 if not"""
  
  calculation = dot(weights, x) + bias    #the dot function takes two array as variables and return their matrix product
  return step_function(calculation)



  
  #For example, I can easily create a AND gate with properly chosen weights.
  # if weights = [2, 2] 
  #    bias = -3
  #        ...We have a AND gate
  #Explanation :
  #
  # if I have an Input Matrix, for example [1,1], we first take the first element of the matrix which is '1'
  # calculation = 2+2-3 = 1
  # Then the step_function will return 1. The same thing for the second element of the matrix.
  # But if the Input matrix is equal to x = [0,1],  dot(weights,x) = 2
  #And 2-3 = -1       So the step_function will return 0
  
  
  #a OR gate :       weights = [2,2]
  #                  bias = -1
  
  #a NOT gate :      weights = [-2]
  #                  bias = 1
  
  #Of course you don't need NN in order to build a logic gate but it's the simplest example I've found...
  
  
  
  
  
  


